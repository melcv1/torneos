{"version":3,"sources":["js\\element-internals-polyfill.js"],"names":["refMap","WeakMap","validityMap","hiddenInputMap","internalsMap","validationMessageMap","formsMap","shadowHostsMap","formElementsMap","refValueMap","upgradeMap","shadowRootMap","validationAnchorMap","documentFragmentMap","onSubmitMap","observerConfig$1","attributes","attributeFilter","observer","MutationObserver","mutationsList","mutation","target","constructor","isDisabled","hasAttribute","toggleAttribute","setAttribute","removeAttribute","formDisabledCallback","apply","removeHiddenInputs","internals","get","forEach","hiddenInput","remove","set","createHiddenInput","ref","input","document","createElement","type","name","getAttribute","after","push","initLabels","labels","length","Array","from","label","addEventListener","focus","bind","firstLabelId","id","htmlFor","setFormValidity","form","nativeControlValidity","elements","filter","element","validity","map","valid","polyfilledElements","hasInvalid","control","isConnected","includes","formInputCallback","event","findParentForm","formChangeCallback","formSubmitCallback","noValidate","size","reverse","node","reportValidity","stopImmediatePropagation","stopPropagation","preventDefault","call","formResetCallback","formAssociated","initForm","onsubmit","formElements","add","initSet","Set","formAssociatedCallback","setTimeout","elem","parent","parentNode","tagName","throwIfNotFormAssociated","message","ErrorType","DOMException","overrideFormMethod","returnValue","method","upgradeInternals","aom","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaCurrent","ariaDisabled","ariaExpanded","ariaHasPopup","ariaHidden","ariaKeyShortcuts","ariaLabel","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","ValidityState","[object Object]","this","badInput","customError","patternMismatch","rangeOverflow","rangeUnderflow","stepMismatch","tooLong","tooShort","typeMismatch","valueMissing","Object","seal","isValid","validityState","key","initNode","observerCallback","mutationList","mutationRecord","addedNodes","removedNodes","added","removed","has","keys","delete","localName","walker","createTreeWalker","NodeFilter","SHOW_ELEMENT","acceptNode","FILTER_SKIP","FILTER_ACCEPT","current","nextNode","disconnect","fragmentObserverCallback","observerConfig","childList","subtree","customStateMap","CustomStateSet","isPolyfilled","super","indexOf","TypeError","state","test","result","part","entry","entries","clear","ElementInternals","rootNode","getRootNode","states","closureValue","attributeName","defineProperty","value","initAom","observe","initRef","DocumentFragment","fragment","deferUpgrade","willValidate","validityEvent","Event","bubbles","cancelable","composed","dispatchEvent","hostRoot","querySelectorAll","checkValidity","anchor","FormData","formDataKey","formDataValue","validityChanges","validationMessage","validityChangesObj","validityObject","check","newState","reconcileValidity","shadowRoot","disabled","window","ElementInternalsFeatureDetection","HTMLElement","attachInternals","randomName","Math","random","toString","replace","customElements","define","featureDetectionElement","every","prop","isElementInternalsSupported","prototype","args","Error","attachShadow","Element","ShadyDOM","documentElement","HTMLFormElement"],"mappings":"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","sourcesContent":["(function () {\n    'use strict';\n\n    const refMap = new WeakMap();\n    const validityMap = new WeakMap();\n    const hiddenInputMap = new WeakMap();\n    const internalsMap = new WeakMap();\n    const validationMessageMap = new WeakMap();\n    const formsMap = new WeakMap();\n    const shadowHostsMap = new WeakMap();\n    const formElementsMap = new WeakMap();\n    const refValueMap = new WeakMap();\n    const upgradeMap = new WeakMap();\n    const shadowRootMap = new WeakMap();\n    const validationAnchorMap = new WeakMap();\n    const documentFragmentMap = new WeakMap();\n    const onSubmitMap = new WeakMap();\n\n    const observerConfig$1 = { attributes: true, attributeFilter: ['disabled'] };\n    const observer = new MutationObserver((mutationsList) => {\n        for (const mutation of mutationsList) {\n            const target = mutation.target;\n            if (target.constructor['formAssociated']) {\n                const isDisabled = target.hasAttribute('disabled');\n                target.toggleAttribute('internals-disabled', isDisabled);\n                if (isDisabled) {\n                    target.setAttribute('aria-disabled', 'true');\n                }\n                else {\n                    target.removeAttribute('aria-disabled');\n                }\n                if (target.formDisabledCallback) {\n                    target.formDisabledCallback.apply(target, [isDisabled]);\n                }\n            }\n        }\n    });\n    const removeHiddenInputs = (internals) => {\n        const hiddenInputs = hiddenInputMap.get(internals);\n        hiddenInputs.forEach(hiddenInput => {\n            hiddenInput.remove();\n        });\n        hiddenInputMap.set(internals, []);\n    };\n    const createHiddenInput = (ref, internals) => {\n        const input = document.createElement('input');\n        input.type = 'hidden';\n        input.name = ref.getAttribute('name');\n        ref.after(input);\n        hiddenInputMap.get(internals).push(input);\n        return input;\n    };\n    const initRef = (ref, internals) => {\n        hiddenInputMap.set(internals, []);\n        const isDisabled = ref.hasAttribute('disabled');\n        ref.toggleAttribute('internals-disabled', isDisabled);\n        observer.observe(ref, observerConfig$1);\n    };\n    const initLabels = (ref, labels) => {\n        if (labels.length) {\n            Array.from(labels).forEach(label => label.addEventListener('click', ref.focus.bind(ref)));\n            let firstLabelId = labels[0].id;\n            if (!labels[0].id) {\n                firstLabelId = `${labels[0].htmlFor}_Label`;\n                labels[0].id = firstLabelId;\n            }\n            ref.setAttribute('aria-labelledby', firstLabelId);\n        }\n    };\n    const setFormValidity = (form) => {\n        const nativeControlValidity = Array.from(form.elements)\n            .filter((element) => element.validity)\n            .map((element) => element.validity.valid);\n        const polyfilledElements = formElementsMap.get(form) || [];\n        const polyfilledValidity = Array.from(polyfilledElements)\n            .filter(control => control.isConnected)\n            .map((control) => internalsMap.get(control).validity.valid);\n        const hasInvalid = [...nativeControlValidity, ...polyfilledValidity].includes(false);\n        form.toggleAttribute('internals-invalid', hasInvalid);\n        form.toggleAttribute('internals-valid', !hasInvalid);\n    };\n    const formInputCallback = (event) => {\n        setFormValidity(findParentForm(event.target));\n    };\n    const formChangeCallback = (event) => {\n        setFormValidity(findParentForm(event.target));\n    };\n    const formSubmitCallback = (event) => {\n        const form = event.target;\n        const elements = formElementsMap.get(form);\n        if (form.noValidate) {\n            return;\n        }\n        if (elements.size) {\n            const nodes = Array.from(elements);\n            const validityList = nodes\n                .reverse()\n                .map(node => {\n                const internals = internalsMap.get(node);\n                return internals.reportValidity();\n            });\n            if (validityList.includes(false)) {\n                event.stopImmediatePropagation();\n                event.stopPropagation();\n                event.preventDefault();\n            }\n            else if (onSubmitMap.get(form)) {\n                const callback = onSubmitMap.get(form);\n                const canceled = callback.call(form, event);\n                if (canceled === false) {\n                    event.preventDefault();\n                }\n            }\n        }\n    };\n    const formResetCallback = (event) => {\n        const elements = formElementsMap.get(event.target);\n        if (elements && elements.size) {\n            elements.forEach(element => {\n                if (element.constructor.formAssociated && element.formResetCallback) {\n                    element.formResetCallback.apply(element);\n                }\n            });\n        }\n    };\n    const initForm = (ref, form, internals) => {\n        if (form) {\n            if (form.onsubmit) {\n                onSubmitMap.set(form, form.onsubmit.bind(form));\n                form.onsubmit = null;\n            }\n            const formElements = formElementsMap.get(form);\n            if (formElements) {\n                formElements.add(ref);\n            }\n            else {\n                const initSet = new Set();\n                initSet.add(ref);\n                formElementsMap.set(form, initSet);\n                form.addEventListener('submit', formSubmitCallback);\n                form.addEventListener('reset', formResetCallback);\n                form.addEventListener('input', formInputCallback);\n                form.addEventListener('change', formChangeCallback);\n            }\n            formsMap.set(form, { ref, internals });\n            if (ref.constructor['formAssociated'] && ref.formAssociatedCallback) {\n                setTimeout(() => {\n                    ref.formAssociatedCallback.apply(ref, [form]);\n                }, 0);\n            }\n            setFormValidity(form);\n        }\n    };\n    const findParentForm = (elem) => {\n        let parent = elem.parentNode;\n        if (parent && parent.tagName !== 'FORM') {\n            parent = findParentForm(parent);\n        }\n        return parent;\n    };\n    const throwIfNotFormAssociated = (ref, message, ErrorType = DOMException) => {\n        if (!ref.constructor['formAssociated']) {\n            throw new ErrorType(message);\n        }\n    };\n    const overrideFormMethod = (form, returnValue, method) => {\n        const elements = formElementsMap.get(form);\n        if (elements && elements.size) {\n            elements.forEach(element => {\n                const internals = internalsMap.get(element);\n                const valid = internals[method]();\n                if (!valid) {\n                    returnValue = false;\n                }\n            });\n        }\n        return returnValue;\n    };\n    const upgradeInternals = (ref) => {\n        if (ref.constructor['formAssociated']) {\n            const internals = internalsMap.get(ref);\n            const { labels, form } = internals;\n            initLabels(ref, labels);\n            initForm(ref, form, internals);\n        }\n    };\n\n    const aom = {\n        ariaAtomic: 'aria-atomic',\n        ariaAutoComplete: 'aria-autocomplete',\n        ariaBusy: 'aria-busy',\n        ariaChecked: 'aria-checked',\n        ariaColCount: 'aria-colcount',\n        ariaColIndex: 'aria-colindex',\n        ariaColSpan: 'aria-colspan',\n        ariaCurrent: 'aria-current',\n        ariaDisabled: 'aria-disabled',\n        ariaExpanded: 'aria-expanded',\n        ariaHasPopup: 'aria-haspopup',\n        ariaHidden: 'aria-hidden',\n        ariaKeyShortcuts: 'aria-keyshortcuts',\n        ariaLabel: 'aria-label',\n        ariaLevel: 'aria-level',\n        ariaLive: 'aria-live',\n        ariaModal: 'aria-modal',\n        ariaMultiLine: 'aria-multiline',\n        ariaMultiSelectable: 'aria-multiselectable',\n        ariaOrientation: 'aria-orientation',\n        ariaPlaceholder: 'aria-placeholder',\n        ariaPosInSet: 'aria-posinset',\n        ariaPressed: 'aria-pressed',\n        ariaReadOnly: 'aria-readonly',\n        ariaRelevant: 'aria-relevant',\n        ariaRequired: 'aria-required',\n        ariaRoleDescription: 'aria-roledescription',\n        ariaRowCount: 'aria-rowcount',\n        ariaRowIndex: 'aria-rowindex',\n        ariaRowSpan: 'aria-rowspan',\n        ariaSelected: 'aria-selected',\n        ariaSetSize: 'aria-setsize',\n        ariaSort: 'aria-sort',\n        ariaValueMax: 'aria-valuemax',\n        ariaValueMin: 'aria-valuemin',\n        ariaValueNow: 'aria-valuenow',\n        ariaValueText: 'aria-valuetext',\n        role: 'role'\n    };\n    const initAom = (ref, internals) => {\n        for (let key in aom) {\n            internals[key] = null;\n            let closureValue = null;\n            const attributeName = aom[key];\n            Object.defineProperty(internals, key, {\n                get() {\n                    return closureValue;\n                },\n                set(value) {\n                    closureValue = value;\n                    if (ref.isConnected) {\n                        ref.setAttribute(attributeName, value);\n                    }\n                    else {\n                        upgradeMap.set(ref, internals);\n                    }\n                }\n            });\n        }\n    };\n\n    class ValidityState {\n        constructor() {\n            this.badInput = false;\n            this.customError = false;\n            this.patternMismatch = false;\n            this.rangeOverflow = false;\n            this.rangeUnderflow = false;\n            this.stepMismatch = false;\n            this.tooLong = false;\n            this.tooShort = false;\n            this.typeMismatch = false;\n            this.valid = true;\n            this.valueMissing = false;\n            Object.seal(this);\n        }\n    }\n    const setValid = (validityObject) => {\n        validityObject.badInput = false;\n        validityObject.customError = false;\n        validityObject.patternMismatch = false;\n        validityObject.rangeOverflow = false;\n        validityObject.rangeUnderflow = false;\n        validityObject.stepMismatch = false;\n        validityObject.tooLong = false;\n        validityObject.tooShort = false;\n        validityObject.typeMismatch = false;\n        validityObject.valid = true;\n        validityObject.valueMissing = false;\n        return validityObject;\n    };\n    const reconcileValidity = (validityObject, newState, form) => {\n        validityObject.valid = isValid(newState);\n        Object.keys(newState).forEach(key => validityObject[key] = newState[key]);\n        if (form) {\n            setFormValidity(form);\n        }\n        return validityObject;\n    };\n    const isValid = (validityState) => {\n        let valid = true;\n        for (let key in validityState) {\n            if (key !== 'valid' && validityState[key] !== false) {\n                valid = false;\n            }\n        }\n        return valid;\n    };\n\n    function initNode(node) {\n        const internals = internalsMap.get(node);\n        const { form } = internals;\n        initForm(node, form, internals);\n        initLabels(node, internals.labels);\n    }\n    function observerCallback(mutationList) {\n        mutationList.forEach(mutationRecord => {\n            const { addedNodes, removedNodes } = mutationRecord;\n            const added = Array.from(addedNodes);\n            const removed = Array.from(removedNodes);\n            added.forEach(node => {\n                if (internalsMap.has(node) && node.constructor['formAssociated']) {\n                    initNode(node);\n                }\n                if (upgradeMap.has(node)) {\n                    const internals = upgradeMap.get(node);\n                    const aomKeys = Object.keys(aom);\n                    aomKeys\n                        .filter(key => internals[key] !== null)\n                        .forEach(key => {\n                        node.setAttribute(aom[key], internals[key]);\n                    });\n                    upgradeMap.delete(node);\n                }\n                if (node.localName === 'form') {\n                    const formElements = formElementsMap.get(node);\n                    const walker = document.createTreeWalker(node, NodeFilter.SHOW_ELEMENT, {\n                        acceptNode(node) {\n                            return internalsMap.has(node) && !formElements && !formElements.has(node) ?\n                                NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;\n                        }\n                    });\n                    let current = walker.nextNode();\n                    while (current) {\n                        initNode(current);\n                        current = walker.nextNode();\n                    }\n                }\n            });\n            removed.forEach(node => {\n                const internals = internalsMap.get(node);\n                if (internals && hiddenInputMap.get(internals)) {\n                    removeHiddenInputs(internals);\n                }\n                if (shadowHostsMap.has(node)) {\n                    const observer = shadowHostsMap.get(node);\n                    observer.disconnect();\n                }\n            });\n        });\n    }\n    function fragmentObserverCallback(mutationList) {\n        mutationList.forEach(mutation => {\n            const { removedNodes } = mutation;\n            removedNodes.forEach(node => {\n                const observer = documentFragmentMap.get(mutation.target);\n                if (internalsMap.has(node)) {\n                    upgradeInternals(node);\n                }\n                observer.disconnect();\n            });\n        });\n    }\n    const deferUpgrade = (fragment) => {\n        const observer = new MutationObserver(fragmentObserverCallback);\n        observer.observe(fragment, { childList: true });\n        documentFragmentMap.set(fragment, observer);\n    };\n    new MutationObserver(observerCallback);\n    const observerConfig = {\n        childList: true,\n        subtree: true\n    };\n\n    const customStateMap = new WeakMap();\n    class CustomStateSet extends Set {\n        static get isPolyfilled() {\n            return true;\n        }\n        constructor(ref) {\n            super();\n            if (!ref || !ref.tagName || ref.tagName.indexOf('-') === -1) {\n                throw new TypeError('Illegal constructor');\n            }\n            customStateMap.set(this, ref);\n        }\n        add(state) {\n            if (!/^--/.test(state) || typeof state !== 'string') {\n                throw new DOMException(`Failed to execute 'add' on 'CustomStateSet': The specified value ${state} must start with '--'.`);\n            }\n            const result = super.add(state);\n            const ref = customStateMap.get(this);\n            ref.toggleAttribute(`state${state}`, true);\n            if (ref.part) {\n                ref.part.add(`state${state}`);\n            }\n            return result;\n        }\n        clear() {\n            for (let [entry] of this.entries()) {\n                this.delete(entry);\n            }\n            super.clear();\n        }\n        delete(state) {\n            const result = super.delete(state);\n            const ref = customStateMap.get(this);\n            ref.toggleAttribute(`state${state}`, false);\n            if (ref.part) {\n                ref.part.remove(`state${state}`);\n            }\n            return result;\n        }\n    }\n\n    class ElementInternals {\n        constructor(ref) {\n            if (!ref || !ref.tagName || ref.tagName.indexOf('-') === -1) {\n                throw new TypeError('Illegal constructor');\n            }\n            const rootNode = ref.getRootNode();\n            const validity = new ValidityState();\n            this.states = new CustomStateSet(ref);\n            refMap.set(this, ref);\n            validityMap.set(this, validity);\n            internalsMap.set(ref, this);\n            initAom(ref, this);\n            initRef(ref, this);\n            Object.seal(this);\n            upgradeInternals(ref);\n            if (rootNode instanceof DocumentFragment) {\n                deferUpgrade(rootNode);\n            }\n        }\n        static get isPolyfilled() {\n            return true;\n        }\n        checkValidity() {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to execute 'checkValidity' on 'ElementInternals': The target element is not a form-associated custom element.`);\n            if (!this.willValidate) {\n                return true;\n            }\n            const validity = validityMap.get(this);\n            if (!validity.valid) {\n                const validityEvent = new Event('invalid', {\n                    bubbles: false,\n                    cancelable: true,\n                    composed: false\n                });\n                ref.dispatchEvent(validityEvent);\n            }\n            return validity.valid;\n        }\n        get form() {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to read the 'form' property from 'ElementInternals': The target element is not a form-associated custom element.`);\n            let form;\n            if (ref.constructor['formAssociated'] === true) {\n                form = findParentForm(ref);\n            }\n            return form;\n        }\n        get labels() {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to read the 'labels' property from 'ElementInternals': The target element is not a form-associated custom element.`);\n            const id = ref.getAttribute('id');\n            const hostRoot = ref.getRootNode();\n            if (hostRoot && id) {\n                return hostRoot.querySelectorAll(`[for=\"${id}\"]`);\n            }\n            return [];\n        }\n        reportValidity() {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to execute 'reportValidity' on 'ElementInternals': The target element is not a form-associated custom element.`);\n            if (!this.willValidate) {\n                return true;\n            }\n            const valid = this.checkValidity();\n            const anchor = validationAnchorMap.get(this);\n            if (anchor && !ref.constructor['formAssociated']) {\n                throw new DOMException(`Failed to execute 'reportValidity' on 'ElementInternals': The target element is not a form-associated custom element.`);\n            }\n            if (!valid && anchor) {\n                ref.focus();\n                anchor.focus();\n            }\n            return valid;\n        }\n        setFormValue(value) {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to execute 'setFormValue' on 'ElementInternals': The target element is not a form-associated custom element.`);\n            removeHiddenInputs(this);\n            if (value != null && !(value instanceof FormData)) {\n                if (ref.getAttribute('name')) {\n                    const hiddenInput = createHiddenInput(ref, this);\n                    hiddenInput.value = value;\n                }\n            }\n            else if (value != null && value instanceof FormData) {\n                Array.from(value).reverse().forEach(([formDataKey, formDataValue]) => {\n                    if (typeof formDataValue === 'string') {\n                        const hiddenInput = createHiddenInput(ref, this);\n                        hiddenInput.name = formDataKey;\n                        hiddenInput.value = formDataValue;\n                    }\n                });\n            }\n            refValueMap.set(ref, value);\n        }\n        setValidity(validityChanges, validationMessage, anchor) {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to execute 'setValidity' on 'ElementInternals': The target element is not a form-associated custom element.`);\n            if (!validityChanges) {\n                throw new TypeError('Failed to execute \\'setValidity\\' on \\'ElementInternals\\': 1 argument required, but only 0 present.');\n            }\n            validationAnchorMap.set(this, anchor);\n            const validity = validityMap.get(this);\n            const validityChangesObj = {};\n            for (const key in validityChanges) {\n                validityChangesObj[key] = validityChanges[key];\n            }\n            if (Object.keys(validityChangesObj).length === 0) {\n                setValid(validity);\n            }\n            const check = { ...validity, ...validityChangesObj };\n            delete check.valid;\n            const { valid } = reconcileValidity(validity, check, this.form);\n            if (!valid && !validationMessage) {\n                throw new DOMException(`Failed to execute 'setValidity' on 'ElementInternals': The second argument should not be empty if one or more flags in the first argument are true.`);\n            }\n            validationMessageMap.set(this, valid ? '' : validationMessage);\n            ref.toggleAttribute('internals-invalid', !valid);\n            ref.toggleAttribute('internals-valid', valid);\n            ref.setAttribute('aria-invalid', `${!valid}`);\n        }\n        get shadowRoot() {\n            const ref = refMap.get(this);\n            const shadowRoot = shadowRootMap.get(ref);\n            if (shadowRoot) {\n                return shadowRoot;\n            }\n            return null;\n        }\n        get validationMessage() {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to read the 'validationMessage' property from 'ElementInternals': The target element is not a form-associated custom element.`);\n            return validationMessageMap.get(this);\n        }\n        get validity() {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to read the 'validity' property from 'ElementInternals': The target element is not a form-associated custom element.`);\n            const validity = validityMap.get(this);\n            return validity;\n        }\n        get willValidate() {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to read the 'willValidate' property from 'ElementInternals': The target element is not a form-associated custom element.`);\n            if ((ref.disabled || ref.hasAttribute('disabled')) ||\n                ref.hasAttribute('readonly')) {\n                return false;\n            }\n            return true;\n        }\n    }\n    function isElementInternalsSupported() {\n        if (!window.ElementInternals) {\n            return false;\n        }\n        class ElementInternalsFeatureDetection extends HTMLElement {\n            constructor() {\n                super();\n                this.internals = this.attachInternals();\n            }\n        }\n        const randomName = `element-internals-feature-detection-${Math.random().toString(36).replace(/[^a-z]+/g, '')}`;\n        customElements.define(randomName, ElementInternalsFeatureDetection);\n        const featureDetectionElement = new ElementInternalsFeatureDetection();\n        return [\n            'shadowRoot',\n            'form',\n            'willValidate',\n            'validity',\n            'validationMessage',\n            'labels',\n            'setFormValue',\n            'setValidity',\n            'checkValidity',\n            'reportValidity'\n        ].every(prop => prop in featureDetectionElement.internals);\n    }\n    if (!isElementInternalsSupported()) {\n        window.ElementInternals = ElementInternals;\n        function attachShadowObserver(...args) {\n            const shadowRoot = attachShadow.apply(this, args);\n            const observer = new MutationObserver(observerCallback);\n            shadowRootMap.set(this, shadowRoot);\n            if (window.ShadyDOM) {\n                observer.observe(this, observerConfig);\n            }\n            else {\n                observer.observe(shadowRoot, observerConfig);\n            }\n            shadowHostsMap.set(this, observer);\n            return shadowRoot;\n        }\n        function checkValidityOverride(...args) {\n            let returnValue = checkValidity.apply(this, args);\n            return overrideFormMethod(this, returnValue, 'checkValidity');\n        }\n        function reportValidityOverride(...args) {\n            let returnValue = reportValidity.apply(this, args);\n            return overrideFormMethod(this, returnValue, 'reportValidity');\n        }\n        HTMLElement.prototype.attachInternals = function () {\n            if (this.tagName.indexOf('-') === -1) {\n                throw new Error(`Failed to execute 'attachInternals' on 'HTMLElement': Unable to attach ElementInternals to non-custom elements.`);\n            }\n            if (internalsMap.has(this)) {\n                throw new DOMException(`DOMException: Failed to execute 'attachInternals' on 'HTMLElement': ElementInternals for the specified element was already attached.`);\n            }\n            return new ElementInternals(this);\n        };\n        const attachShadow = Element.prototype.attachShadow;\n        Element.prototype.attachShadow = attachShadowObserver;\n        const documentObserver = new MutationObserver(observerCallback);\n        documentObserver.observe(document.documentElement, observerConfig);\n        const checkValidity = HTMLFormElement.prototype.checkValidity;\n        HTMLFormElement.prototype.checkValidity = checkValidityOverride;\n        const reportValidity = HTMLFormElement.prototype.reportValidity;\n        HTMLFormElement.prototype.reportValidity = reportValidityOverride;\n        if (!window.CustomStateSet) {\n            window.CustomStateSet = CustomStateSet;\n        }\n    }\n    else if (!window.CustomStateSet) {\n        window.CustomStateSet = CustomStateSet;\n        const attachInternals = HTMLElement.prototype.attachInternals;\n        HTMLElement.prototype.attachInternals = function (...args) {\n            const internals = attachInternals.call(this, args);\n            internals.states = new CustomStateSet(this);\n            return internals;\n        };\n    }\n\n}());\n"]}